% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/COTAN-getters.R, R/COTAN-modifiers.R,
%   R/DEAOnClusters.R, R/UMAP-plot.R, R/clustersDeltaExpression.R,
%   R/clustersMarkersHeatmapPlot.R, R/clustersSummaryPlot.R,
%   R/findClustersMarkers.R, R/geneSetEnrichment.R
\name{HandlingClusterizations}
\alias{HandlingClusterizations}
\alias{getClusterizations,COTAN-method}
\alias{getClusterizations}
\alias{getClusterizationName,COTAN-method}
\alias{getClusterizationName}
\alias{getClusterizationData,COTAN-method}
\alias{getClusterizationData}
\alias{getClustersCoex,COTAN-method}
\alias{getClustersCoex}
\alias{addClusterization,COTAN-method}
\alias{addClusterization}
\alias{addClusterizationCoex,COTAN-method}
\alias{addClusterizationCoex}
\alias{dropClusterization,COTAN-method}
\alias{dropClusterization}
\alias{DEAOnClusters}
\alias{UMAPPlot}
\alias{clustersDeltaExpression}
\alias{clustersMarkersHeatmapPlot}
\alias{clustersSummaryPlot}
\alias{clustersTreePlot}
\alias{findClustersMarkers}
\alias{geneSetEnrichment}
\title{Handling cells' \emph{clusterization} and related functions}
\usage{
\S4method{getClusterizations}{COTAN}(objCOTAN, dropNoCoex = FALSE, keepPrefix = FALSE)

\S4method{getClusterizationName}{COTAN}(objCOTAN, clName = "", keepPrefix = FALSE)

\S4method{getClusterizationData}{COTAN}(objCOTAN, clName = "")

\S4method{getClustersCoex}{COTAN}(objCOTAN)

\S4method{addClusterization}{COTAN}(
  objCOTAN,
  clName,
  clusters,
  coexDF = data.frame(),
  override = FALSE
)

\S4method{addClusterizationCoex}{COTAN}(objCOTAN, clName, coexDF)

\S4method{dropClusterization}{COTAN}(objCOTAN, clName)

DEAOnClusters(objCOTAN, clusters = NULL)

UMAPPlot(df, clusters = NULL, elements = NULL, title = "")

clustersDeltaExpression(objCOTAN, clusters = NULL, clName = "")

clustersMarkersHeatmapPlot(
  objCOTAN,
  groupMarkers,
  clName = NULL,
  kCuts = 3,
  conditionsList = NULL
)

clustersSummaryPlot(objCOTAN, condition = NULL, clName = "", plotTitle = "")

clustersTreePlot(
  objCOTAN,
  kCuts,
  clName = "",
  distance = "cosine",
  hclustMethod = "ward.D2"
)

findClustersMarkers(
  objCOTAN,
  n = 10L,
  clusters = NULL,
  markers = NULL,
  coexDF = NULL,
  pValueDF = NULL,
  deltaExp = NULL,
  method = "bonferroni"
)

geneSetEnrichment(clustersCoex, groupMarkers)
}
\arguments{
\item{objCOTAN}{a \code{COTAN} object}

\item{dropNoCoex}{When \code{TRUE} drops the names from the \emph{clusterizations} with
empty associated coex \code{data.frame}}

\item{keepPrefix}{When \code{TRUE} returns the internal name of the
\emph{clusterization}: the one with the \code{CL_} prefix.}

\item{clName}{The name of the \emph{clusterization}. If not given the last
available \emph{clusterization} will be returned, as it is probably the most
significant!}

\item{clusters}{a \emph{clusterization}}

\item{coexDF}{a \code{data.frame} with \emph{In/Out} \code{COEX}. E.G. the result of a call
to \code{\link[=DEAOnClusters]{DEAOnClusters()}}}

\item{override}{When \code{TRUE} silently allows overriding data for an existing
\emph{clusterization} name. Otherwise the default behavior will avoid potential
data losses}

\item{df}{the \code{data.frame} to plot. It must have a row names containing the
given elements}

\item{elements}{a named \code{list} of elements to label. Each array in the list
will have different color.}

\item{title}{a string giving the plot title. Will default to UMAP Plot if not
specified}

\item{groupMarkers}{a named \code{list} of arrays of genes}

\item{kCuts}{the number of estimated \emph{cluster} (this defines the height for
the tree cut)}

\item{conditionsList}{a list of \code{data.frames} coming from the
\code{\link[=clustersSummaryPlot]{clustersSummaryPlot()}} function}

\item{condition}{the name of a column in the \code{metaCells} \code{data.frame}
containing the \emph{condition}. This allows to further separate the cells in
more sub-groups. When not given condition is assumed to be the same for all
cells.}

\item{plotTitle}{The title to use for the returned plot}

\item{distance}{type of distance to use (default is \code{cosine}, \code{euclidean} is
also available)}

\item{hclustMethod}{default is "ward.D2" but can be any method defined by
\code{\link[stats:hclust]{stats::hclust()}} function}

\item{n}{the number of extreme \code{COEX} values to return}

\item{markers}{a \code{list} of marker genes}

\item{pValueDF}{a \code{data.frame} with \emph{In/Out} \emph{p-value} based on the \code{COEX}.
E.G. the result of a call to \code{DEAOnClusters()}}

\item{deltaExp}{a \code{data.frame} with the \emph{delta-expression} in a \emph{cluster}.
E.G. the result of a call to \code{\link[=clustersDeltaExpression]{clustersDeltaExpression()}}}

\item{method}{\emph{p-value} adjustment method. Defaults to \code{"bonferroni"}}

\item{clustersCoex}{the \code{COEX} \code{data.frame}}
}
\value{
\code{getClusterizations()} returns a vector of \emph{clusterization} names,
usually without the \code{CL_} prefix

\code{getClusterizationName()} returns the normalized \emph{clusterization}
name or \code{NULL} if no \emph{clusterizations} are present

\code{getClusterizationData()} returns a \code{list} with 2 elements:
\itemize{
\item "clusters" the named cluster labels array
\item "coex" the associated \code{COEX} \code{data.frame}; it will be \strong{empty} if not
defined
}

\code{getClustersCoex()} returns the list with a \code{COEX} \code{data.frame} for
each \emph{clusterization}. When not empty, each \code{data.frame} contains a \code{COEX}
column for each \emph{cluster}.

\code{addClusterization()} returns the updated \code{COTAN} object

\code{addClusterizationCoex()} returns the updated \code{COTAN} object

\code{dropClusterization()} returns the updated \code{COTAN} object

\code{DEAOnClusters()} returns a \code{list} with two objects:
\itemize{
\item "coex"    - the coexpression \code{data.frame} for the genes in each \emph{cluster}
\item "p-value" - the corresponding p-values \code{data.frame}
}

\code{UMAPPlot()} returns a \code{ggplot2} object

\code{clustersDeltaExpression()} returns a \code{data.frame} with the weighted
discrepancy of the expression of each gene within the \emph{cluster} against
model expectations

\code{clustersMarkersHeatmapPlot()} returns a list with:
\itemize{
\item "heatmapPlot" the complete heatmap plot
\item "dataScore" the \code{data.frame} with the score values
}

\code{clustersSummaryPlot()} returns a \code{list} with a \code{data.frame} and a
\code{ggplot} objects
\itemize{
\item "data" contains the data,
\item "plot" is the returned plot
}

\code{clustersTreePlot()} returns a list with 2 objects:
\itemize{
\item "dend" a \code{ggplot2} object representing the \code{dendrogram} plot
\item "objCOTAN" the updated \code{COTAN} object
}

\code{findClustersMarkers()} returns a \code{data.frame} containing \code{n}
top/bottom \code{COEX} scores for each \emph{cluster}

\code{geneSetEnrichment()} returns a \code{data.frame} with the cumulative
score
}
\description{
These functions manage the \emph{clusterizations} and their
associated \emph{cluster} \code{COEX} \code{data.frame}s.

A \emph{clusterization} is any partition of the cells where to each cell it is
assigned a \strong{label}; a group of cells with the same label is called
\emph{cluster}.

For each \emph{cluster} is also possible to define a \code{COEX} value for each gene,
indicating its increased or decreased expression in the \emph{cluster} compared
to the whole background. A \code{data.frame} with these values listed in a
column for each \emph{cluster} is stored separately for each \emph{clusterization} in
the \code{clustersCoex} member.

The formulae for this \emph{In/Out} \code{COEX} are similar to those used in the
\code{\link[=calculateCoex]{calculateCoex()}} method, with the \strong{role} of the second gene taken by the
\emph{In/Out} status of the cells with respect to each \emph{cluster}.
}
\details{
\code{getClusterizations()} extracts the list of the \emph{clusterizations}
defined in the \code{COTAN} object.

\code{getClusterizationName()} normalizes the given \emph{clusterization} name
or, if none were given, returns the name of last available \emph{clusterization}
in the \code{COTAN} object. It can return the \emph{clusterization} \strong{internal name}
if needed

\code{getClusterizationData()} extracts the asked \emph{clusterization} and
its associated \code{COEX} \code{data.frame} from the \code{COTAN} object

\code{getClustersCoex()} extracts the full \code{clusterCoex} member \code{list}

\code{addClusterization()} adds a \emph{clusterization} to the current \code{COTAN}
object, by adding a new column in the \code{metaCells} \code{data.frame} and adding a
new element in the \code{clustersCoex} \code{list} using the passed in \code{COEX}
\code{data.frame} or an empty \code{data.frame} if none were passed in.

\code{addClusterizationCoex()} adds a \emph{clusterization} \code{COEX}
\code{data.frame} to the current \code{COTAN} object. It requires the named
\emph{clusterization} to be already present.

\code{dropClusterization()} drops a \emph{clusterization} from the current
\code{COTAN} object, by removing the corresponding column in the \code{metaCells}
\code{data.frame} and the corresponding \code{COEX} \code{data.frame} from the
\code{clustersCoex} \code{list}.

\code{DEAOnClusters()} is used to run the Differential Expression
analysis using the \code{COTAN} contingency tables on each \emph{cluster} in the
given \emph{clusterization}

\code{UMAPPlot()} plots the given \code{data.frame} containing genes
information related to clusters after applying the UMAP transformation.

\code{clustersDeltaExpression()} estimates the change in genes'
expression inside the \emph{cluster} compared to the average situation in the
data set.

\code{clustersMarkersHeatmapPlot()} returns the heatmap plot of a summary
score for each \emph{cluster} and each gene marker list in the given
\emph{clusterization}. It also returns the numerosity and percentage of each
\emph{cluster} on the right and a gene clusterization dendogram on the left (as
returned by the function \code{\link[=geneSetEnrichment]{geneSetEnrichment()}}) that allows to estimate
which markers groups are more or less expressed in each \emph{cluster} so it is
easier to derive the \emph{clusters}' cell types.

\code{clustersSummaryPlot()} calculates various statistics about each
cluster (with an optional further \code{condition} to separate the cells) and
puts them together into a plot. The calculated statistics are:
\itemize{
\item "Cluster" the \emph{cluster} \strong{label}
\item "Condition" the further element to sub-divide the clusters
\item "CellNumber" the number of cells in the group
\item "MeanUDE" the average "UDE" in the group of cells
\item "MedianUDE" the median "UDE" in the group of cells
\item "ExpGenes25" the number of genes expressed in at the least 25\% of the
cells in the group
\item "ExpGenes" the number of genes expressed at the least once in any of the
cells in the group
\item "CellPercentage" fraction of the cells with respect to the total cells
}

\code{clustersTreePlot()} returns the \code{dendogram} plot where the given
\emph{clusters} are placed on the base of their relative distance. Also if
needed calculates and stores the \code{DEA} of the relevant \emph{clusterization}.

\code{findClustersMarkers()} takes in a \code{COTAN} object and a
\emph{clusterization} and produces a \code{data.frame} with the \code{n} most positively
enriched and the \code{n} most negatively enriched genes for each \emph{cluster}. The
function also provides whether and the found genes are in the given
\code{markers} list or not. It also returns the \emph{p-value} and the \emph{adjusted}
\emph{p-value} using the \code{\link[stats:p.adjust]{stats::p.adjust()}}

\code{geneSetEnrichment()} returns a cumulative score of enrichment in a
\emph{cluster} over a gene set. In formulae it calculates
\eqn{\frac{1}{n}\sum_i(1-e^{-\theta X_i})}, where the \eqn{X_i} are the
positive values from \code{\link[=DEAOnClusters]{DEAOnClusters()}} and \eqn{\theta = -\frac{1}{0.1}
  \ln(0.25)}
}
\examples{
data("test.dataset")
objCOTAN <- COTAN(raw = test.dataset)
objCOTAN <- clean(objCOTAN)
objCOTAN <- estimateDispersionBisection(objCOTAN, cores = 12)

data("test.dataset.clusters1")
clusters <- test.dataset.clusters1

coexDF <- DEAOnClusters(objCOTAN, clusters = clusters)[["coex"]]

groupMarkers <- list(G1 = c("g-000010", "g-000020", "g-000030"),
                     G2 = c("g-000300", "g-000330"),
                     G3 = c("g-000510", "g-000530", "g-000550",
                            "g-000570", "g-000590"))

umapPlot <- UMAPPlot(coexDF, clusters = NULL, elements = groupMarkers)
plot(umapPlot)

objCOTAN <- addClusterization(objCOTAN, clName = "first_clusterization",
                              clusters = clusters, coexDF = coexDF)

##objCOTAN <- dropClusterization(objCOTAN, "first_clusterization")

clusterizations <- getClusterizations(objCOTAN, dropNoCoex = TRUE)

enrichment <- geneSetEnrichment(clustersCoex = coexDF,
                                groupMarkers = groupMarkers)

##clHeatmapPlot <- clustersMarkersHeatmapPlot(objCOTAN, groupMarkers)
##plot(clHeatmapPlot)

clName <- getClusterizationName(objCOTAN)

clusterDataList <- getClusterizationData(objCOTAN, clName = clName)

allClustersCoexDF <- getClustersCoex(objCOTAN)


deltaExpression <- clustersDeltaExpression(objCOTAN, clusters)

dataAndPlot <- clustersSummaryPlot(objCOTAN)
plot(dataAndPlot[["plot"]])

treePlotAndObj <- clustersTreePlot(objCOTAN, 2)
objCOTAN <- treePlotAndObj[["objCOTAN"]]
plot(treePlotAndObj[["dend"]])

clMarkers <- findClustersMarkers(objCOTAN, clusters = clusters)

}
