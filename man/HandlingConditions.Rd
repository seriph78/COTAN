% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/COTAN-getters.R, R/COTAN-modifiers.R
\name{HandlingConditions}
\alias{HandlingConditions}
\alias{getAllConditions,COTAN-method}
\alias{getAllConditions}
\alias{getConditionName,COTAN-method}
\alias{getConditionName}
\alias{getCondition,COTAN-method}
\alias{getCondition}
\alias{addCondition,COTAN-method}
\alias{addCondition}
\alias{dropCondition,COTAN-method}
\alias{dropCondition}
\title{Handling cells' \emph{conditions} and related functions}
\usage{
\S4method{getAllConditions}{COTAN}(objCOTAN, keepPrefix = FALSE)

\S4method{getConditionName}{COTAN}(objCOTAN, condName = "", keepPrefix = FALSE)

\S4method{getCondition}{COTAN}(objCOTAN, condName = "")

\S4method{addCondition}{COTAN}(objCOTAN, condName, conditions, override = FALSE)

\S4method{dropCondition}{COTAN}(objCOTAN, condName)
}
\arguments{
\item{objCOTAN}{a \code{COTAN} object}

\item{keepPrefix}{When \code{TRUE} returns the internal name of the
\emph{condition}: the one with the \code{COND_} prefix.}

\item{condName}{the name of an existing \emph{condition}.}

\item{conditions}{a (factors) array of \emph{condition} \strong{labels}}

\item{override}{When \code{TRUE} silently allows overriding data for an existing
\emph{condition} name. Otherwise the default behavior will avoid potential
data losses}
}
\value{
\code{getAllConditions()} returns a vector of \emph{conditions} names,
usually without the \code{COND_} prefix

\code{getConditionName()} returns the normalized \emph{condition} name or
\code{NULL} if no \emph{conditions} are present

\code{getCondition()} returns a named \code{factor} with the condition

\code{addCondition()} returns the updated \code{COTAN} object

\code{dropCondition()} returns the updated \code{COTAN} object
}
\description{
These functions manage the \emph{conditions}.

A \emph{condition} is any partition of the cells where to each cell it is
assigned a \emph{condition} \strong{label}.
}
\details{
\code{getAllConditions()} extracts the list of the \emph{conditions} defined
in the \code{COTAN} object.

\code{getConditionName()} normalizes the given \emph{condition} name or, if
none were given, returns the name of last available \emph{condition} in the
\code{COTAN} object. It can return the \emph{condition} \strong{internal name} if needed

\code{getCondition()} extracts the asked \emph{condition} from the \code{COTAN}
object

\code{addCcondition()} adds a \emph{condition} to the current \code{COTAN} object,
by adding a new column in the \code{metaCells} \code{data.frame}

\code{dropCondition()} drops a \emph{condition} from the current \code{COTAN}
object, by removing the corresponding column in the \code{metaCells}
\code{data.frame}
}
\examples{
data("test.dataset")
objCOTAN <- COTAN(raw = test.dataset)
##objCOTAN <- clean(objCOTAN)
##objCOTAN <- estimateDispersionBisection(objCOTAN, cores = 12)
##
##data("test.dataset.clusters1")
##clusters <- test.dataset.clusters1
##
##coexDF <- DEAOnClusters(objCOTAN, clusters = clusters)[["coex"]]
##
##groupMarkers <- list(G1 = c("g-000010", "g-000020", "g-000030"),
##                     G2 = c("g-000300", "g-000330"),
##                     G3 = c("g-000510", "g-000530", "g-000550",
##                            "g-000570", "g-000590"))
##
##umapPlot <- UMAPPlot(coexDF, clusters = NULL, elements = groupMarkers)
##plot(umapPlot)
##

genre <- rep(C("F", "M"), getNumCells(objCOTAN) / 2)
objCOTAN <- addCondition(objCOTAN, condName = "Genre", conditions = genre)

##objCOTAN <- dropCondition(objCOTAN, "Genre")

conditionsNames <- getAllConditions(objCOTAN)

##enrichment <- geneSetEnrichment(clustersCoex = coexDF,
##                                groupMarkers = groupMarkers)

##clHeatmapPlot <- clustersMarkersHeatmapPlot(objCOTAN, groupMarkers)
##plot(clHeatmapPlot)

condName <- getConditionName(objCOTAN)

condition <- getCondition(objCOTAN, condName = condName)

}
